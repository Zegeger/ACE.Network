////////////////////////////////////////////////////////////////////////////////////
// This file is generated code.  Do not modify it's contents.
// If changes are required, update the message.xml in the TemplateBulder
// project and run the TemplateBuilder to recreate the files.
////////////////////////////////////////////////////////////////////////////////////
using System;
using System.IO;
using System.Collections.Generic;
using ACE.Network.Enums;
using ACE.Network.Types;
using ACE.Network.Extensions;

namespace ACE.Network.Messages
{
    internal static class MessageFactory
    {
        static Dictionary<uint, Func<BinaryReader, Message>> S2CMessageTable = new Dictionary<uint, Func<BinaryReader, Message>>();
        static Dictionary<uint, Func<BinaryReader, Message>> C2SMessageTable = new Dictionary<uint, Func<BinaryReader, Message>>();

        static MessageFactory()
        {
            S2CMessageTable.Add(0x0003, (reader) => new AllegianceUpdateAbortedS2C(reader));
            S2CMessageTable.Add(0x0004, (reader) => new PopUpStringS2C(reader));
            C2SMessageTable.Add(0x0005, (reader) => new PlayerOptionChangedEventC2S(reader));
            C2SMessageTable.Add(0x0008, (reader) => new TargetedMeleeAttackC2S(reader));
            C2SMessageTable.Add(0x000A, (reader) => new TargetedMissileAttackC2S(reader));
            C2SMessageTable.Add(0x000F, (reader) => new SetAFKModeC2S(reader));
            C2SMessageTable.Add(0x0010, (reader) => new SetAFKMessageC2S(reader));
            S2CMessageTable.Add(0x0013, (reader) => new PlayerDescriptionS2C(reader));
            C2SMessageTable.Add(0x0015, (reader) => new TalkC2S(reader));
            C2SMessageTable.Add(0x0017, (reader) => new RemoveFriendC2S(reader));
            C2SMessageTable.Add(0x0018, (reader) => new AddFriendC2S(reader));
            C2SMessageTable.Add(0x0019, (reader) => new PutItemInContainerC2S(reader));
            C2SMessageTable.Add(0x001A, (reader) => new GetAndWieldItemC2S(reader));
            C2SMessageTable.Add(0x001B, (reader) => new DropItemC2S(reader));
            C2SMessageTable.Add(0x001D, (reader) => new SwearAllegianceC2S(reader));
            C2SMessageTable.Add(0x001E, (reader) => new BreakAllegianceC2S(reader));
            C2SMessageTable.Add(0x001F, (reader) => new UpdateRequestC2S(reader));
            S2CMessageTable.Add(0x0020, (reader) => new AllegianceUpdateS2C(reader));
            S2CMessageTable.Add(0x0021, (reader) => new FriendsUpdateS2C(reader));
            S2CMessageTable.Add(0x0022, (reader) => new ServerSaysContainIDS2C(reader));
            S2CMessageTable.Add(0x0023, (reader) => new WearItemS2C(reader));
            S2CMessageTable.Add(0x0024, (reader) => new ServerSaysRemoveS2C(reader));
            C2SMessageTable.Add(0x0025, (reader) => new ClearFriendsC2S(reader));
            C2SMessageTable.Add(0x0026, (reader) => new TeleToPKLArenaC2S(reader));
            C2SMessageTable.Add(0x0027, (reader) => new TeleToPKArenaC2S(reader));
            S2CMessageTable.Add(0x0029, (reader) => new CharacterTitleTableS2C(reader));
            S2CMessageTable.Add(0x002B, (reader) => new AddOrSetCharacterTitleS2C(reader));
            C2SMessageTable.Add(0x002C, (reader) => new SetDisplayCharacterTitleC2S(reader));
            C2SMessageTable.Add(0x0030, (reader) => new QueryAllegianceNameC2S(reader));
            C2SMessageTable.Add(0x0031, (reader) => new ClearAllegianceNameC2S(reader));
            C2SMessageTable.Add(0x0032, (reader) => new TalkDirectC2S(reader));
            C2SMessageTable.Add(0x0033, (reader) => new SetAllegianceNameC2S(reader));
            C2SMessageTable.Add(0x0035, (reader) => new UseWithTargetEventC2S(reader));
            C2SMessageTable.Add(0x0036, (reader) => new UseEventC2S(reader));
            C2SMessageTable.Add(0x003B, (reader) => new SetAllegianceOfficerC2S(reader));
            C2SMessageTable.Add(0x003C, (reader) => new SetAllegianceOfficerTitleC2S(reader));
            C2SMessageTable.Add(0x003D, (reader) => new ListAllegianceOfficerTitlesC2S(reader));
            C2SMessageTable.Add(0x003E, (reader) => new ClearAllegianceOfficerTitlesC2S(reader));
            C2SMessageTable.Add(0x003F, (reader) => new DoAllegianceLockActionC2S(reader));
            C2SMessageTable.Add(0x0040, (reader) => new SetAllegianceApprovedVassalC2S(reader));
            C2SMessageTable.Add(0x0041, (reader) => new AllegianceChatGagC2S(reader));
            C2SMessageTable.Add(0x0042, (reader) => new DoAllegianceHouseActionC2S(reader));
            C2SMessageTable.Add(0x0044, (reader) => new TrainAttribute2ndC2S(reader));
            C2SMessageTable.Add(0x0045, (reader) => new TrainAttributeC2S(reader));
            C2SMessageTable.Add(0x0046, (reader) => new TrainSkillC2S(reader));
            C2SMessageTable.Add(0x0047, (reader) => new TrainSkillAdvancementClassC2S(reader));
            C2SMessageTable.Add(0x0048, (reader) => new CastUntargetedSpellC2S(reader));
            C2SMessageTable.Add(0x004A, (reader) => new CastTargetedSpellC2S(reader));
            S2CMessageTable.Add(0x0052, (reader) => new StopViewingObjectContentsS2C(reader));
            C2SMessageTable.Add(0x0053, (reader) => new ChangeCombatModeC2S(reader));
            C2SMessageTable.Add(0x0054, (reader) => new StackableMergeC2S(reader));
            C2SMessageTable.Add(0x0055, (reader) => new StackableSplitToContainerC2S(reader));
            C2SMessageTable.Add(0x0056, (reader) => new StackableSplitTo3DC2S(reader));
            C2SMessageTable.Add(0x0058, (reader) => new ModifyCharacterSquelchC2S(reader));
            C2SMessageTable.Add(0x0059, (reader) => new ModifyAccountSquelchC2S(reader));
            C2SMessageTable.Add(0x005B, (reader) => new ModifyGlobalSquelchC2S(reader));
            C2SMessageTable.Add(0x005D, (reader) => new TalkDirectByNameC2S(reader));
            C2SMessageTable.Add(0x005F, (reader) => new BuyC2S(reader));
            C2SMessageTable.Add(0x0060, (reader) => new SellC2S(reader));
            S2CMessageTable.Add(0x0062, (reader) => new VendorInfoS2C(reader));
            C2SMessageTable.Add(0x0063, (reader) => new TeleToLifestoneC2S(reader));
            S2CMessageTable.Add(0x0075, (reader) => new StartBarberS2C(reader));
            S2CMessageTable.Add(0x00A0, (reader) => new ServerSaysAttemptFailedS2C(reader));
            C2SMessageTable.Add(0x00A1, (reader) => new LoginCompleteNotificationC2S(reader));
            C2SMessageTable.Add(0x00A2, (reader) => new CreateC2S(reader));
            S2CMessageTable.Add(0x00A3, (reader) => new QuitS2C(reader));
            C2SMessageTable.Add(0x00A3, (reader) => new QuitC2S(reader));
            S2CMessageTable.Add(0x00A4, (reader) => new DismissS2C(reader));
            C2SMessageTable.Add(0x00A4, (reader) => new DismissC2S(reader));
            C2SMessageTable.Add(0x00A5, (reader) => new RecruitC2S(reader));
            C2SMessageTable.Add(0x00A6, (reader) => new UpdateRequestC2S(reader));
            C2SMessageTable.Add(0x00AA, (reader) => new BookAddPageC2S(reader));
            C2SMessageTable.Add(0x00AB, (reader) => new BookModifyPageC2S(reader));
            C2SMessageTable.Add(0x00AC, (reader) => new BookDataC2S(reader));
            C2SMessageTable.Add(0x00AD, (reader) => new BookDeletePageC2S(reader));
            C2SMessageTable.Add(0x00AE, (reader) => new BookPageDataC2S(reader));
            S2CMessageTable.Add(0x00B4, (reader) => new BookOpenS2C(reader));
            S2CMessageTable.Add(0x00B5, (reader) => new BookUnknown1S2C(reader));
            S2CMessageTable.Add(0x00B6, (reader) => new BookAddPageResponseS2C(reader));
            S2CMessageTable.Add(0x00B7, (reader) => new BookDeletePageResponseS2C(reader));
            S2CMessageTable.Add(0x00B8, (reader) => new BookPageDataResponseS2C(reader));
            C2SMessageTable.Add(0x00BF, (reader) => new SetInscriptionC2S(reader));
            S2CMessageTable.Add(0x00C3, (reader) => new GetInscriptionResponseS2C(reader));
            C2SMessageTable.Add(0x00C8, (reader) => new AppraiseC2S(reader));
            S2CMessageTable.Add(0x00C9, (reader) => new SetAppraiseInfoS2C(reader));
            C2SMessageTable.Add(0x00CD, (reader) => new GiveObjectRequestC2S(reader));
            C2SMessageTable.Add(0x00D6, (reader) => new TeleportC2S(reader));
            C2SMessageTable.Add(0x0140, (reader) => new AbuseLogRequestC2S(reader));
            C2SMessageTable.Add(0x0145, (reader) => new AddToChannelC2S(reader));
            C2SMessageTable.Add(0x0146, (reader) => new RemoveFromChannelC2S(reader));
            C2SMessageTable.Add(0x0147, (reader) => new ChannelBroadcastC2S(reader));
            S2CMessageTable.Add(0x0147, (reader) => new ChannelBroadcastS2C(reader));
            S2CMessageTable.Add(0x0148, (reader) => new ChannelListS2C(reader));
            C2SMessageTable.Add(0x0148, (reader) => new ChannelListC2S(reader));
            S2CMessageTable.Add(0x0149, (reader) => new ChannelIndexS2C(reader));
            C2SMessageTable.Add(0x0149, (reader) => new ChannelIndexC2S(reader));
            C2SMessageTable.Add(0x0195, (reader) => new NoLongerViewingContentsC2S(reader));
            S2CMessageTable.Add(0x0196, (reader) => new OnViewContentsS2C(reader));
            S2CMessageTable.Add(0x0197, (reader) => new UpdateStackSizeS2C(reader));
            S2CMessageTable.Add(0x019A, (reader) => new ServerSaysMoveItemS2C(reader));
            C2SMessageTable.Add(0x019B, (reader) => new StackableSplitToWieldC2S(reader));
            C2SMessageTable.Add(0x019C, (reader) => new AddShortCutC2S(reader));
            C2SMessageTable.Add(0x019D, (reader) => new RemoveShortCutC2S(reader));
            S2CMessageTable.Add(0x019E, (reader) => new HandlePlayerDeathEventS2C(reader));
            C2SMessageTable.Add(0x01A1, (reader) => new CharacterOptionsEventC2S(reader));
            S2CMessageTable.Add(0x01A7, (reader) => new HandleAttackDoneEventS2C(reader));
            S2CMessageTable.Add(0x01A8, (reader) => new RemoveSpellS2C(reader));
            C2SMessageTable.Add(0x01A8, (reader) => new RemoveSpellC2S(reader));
            S2CMessageTable.Add(0x01AC, (reader) => new HandleVictimNotificationEventSelfS2C(reader));
            S2CMessageTable.Add(0x01AD, (reader) => new HandleVictimNotificationEventOtherS2C(reader));
            S2CMessageTable.Add(0x01B1, (reader) => new HandleAttackerNotificationEventS2C(reader));
            S2CMessageTable.Add(0x01B2, (reader) => new HandleDefenderNotificationEventS2C(reader));
            S2CMessageTable.Add(0x01B3, (reader) => new HandleEvasionAttackerNotificationEventS2C(reader));
            S2CMessageTable.Add(0x01B4, (reader) => new HandleEvasionDefenderNotificationEventS2C(reader));
            C2SMessageTable.Add(0x01B7, (reader) => new CancelAttackC2S(reader));
            S2CMessageTable.Add(0x01B8, (reader) => new HandleCommenceAttackEventS2C(reader));
            C2SMessageTable.Add(0x01BF, (reader) => new QueryHealthC2S(reader));
            S2CMessageTable.Add(0x01C0, (reader) => new QueryHealthResponseS2C(reader));
            C2SMessageTable.Add(0x01C2, (reader) => new QueryAgeC2S(reader));
            S2CMessageTable.Add(0x01C3, (reader) => new QueryAgeResponseS2C(reader));
            C2SMessageTable.Add(0x01C4, (reader) => new QueryBirthC2S(reader));
            S2CMessageTable.Add(0x01C7, (reader) => new UseDoneS2C(reader));
            S2CMessageTable.Add(0x01C8, (reader) => new AllegiancePanelOpenS2C(reader));
            S2CMessageTable.Add(0x01C9, (reader) => new FellowUpdateDoneS2C(reader));
            S2CMessageTable.Add(0x01CA, (reader) => new FellowStatsDoneS2C(reader));
            S2CMessageTable.Add(0x01CB, (reader) => new AppraiseDoneS2C(reader));
            S2CMessageTable.Add(0x01D1, (reader) => new PrivateRemoveIntEventS2C(reader));
            S2CMessageTable.Add(0x01D2, (reader) => new RemoveIntEventS2C(reader));
            S2CMessageTable.Add(0x01D3, (reader) => new PrivateRemoveBoolEventS2C(reader));
            S2CMessageTable.Add(0x01D4, (reader) => new RemoveBoolEventS2C(reader));
            S2CMessageTable.Add(0x01D5, (reader) => new PrivateRemoveFloatEventS2C(reader));
            S2CMessageTable.Add(0x01D6, (reader) => new RemoveFloatEventS2C(reader));
            S2CMessageTable.Add(0x01D7, (reader) => new PrivateRemoveStringEventS2C(reader));
            S2CMessageTable.Add(0x01D8, (reader) => new RemoveStringEventS2C(reader));
            S2CMessageTable.Add(0x01D9, (reader) => new PrivateRemoveDataIDEventS2C(reader));
            S2CMessageTable.Add(0x01DA, (reader) => new RemoveDataIDEventS2C(reader));
            S2CMessageTable.Add(0x01DB, (reader) => new PrivateRemoveInstanceIDEventS2C(reader));
            S2CMessageTable.Add(0x01DC, (reader) => new RemoveInstanceIDEventS2C(reader));
            S2CMessageTable.Add(0x01DD, (reader) => new PrivateRemovePositionEventS2C(reader));
            S2CMessageTable.Add(0x01DE, (reader) => new RemovePositionEventS2C(reader));
            C2SMessageTable.Add(0x01DF, (reader) => new EmoteC2S(reader));
            S2CMessageTable.Add(0x01E0, (reader) => new HearEmoteS2C(reader));
            C2SMessageTable.Add(0x01E1, (reader) => new SoulEmoteC2S(reader));
            S2CMessageTable.Add(0x01E2, (reader) => new HearSoulEmoteS2C(reader));
            C2SMessageTable.Add(0x01E3, (reader) => new AddSpellFavoriteC2S(reader));
            C2SMessageTable.Add(0x01E4, (reader) => new RemoveSpellFavoriteC2S(reader));
            C2SMessageTable.Add(0x01E9, (reader) => new RequestPingC2S(reader));
            S2CMessageTable.Add(0x01EA, (reader) => new ReturnPingS2C(reader));
            S2CMessageTable.Add(0x01F4, (reader) => new SetSquelchDBS2C(reader));
            C2SMessageTable.Add(0x01F6, (reader) => new OpenTradeNegotiationsC2S(reader));
            C2SMessageTable.Add(0x01F7, (reader) => new CloseTradeNegotiationsC2S(reader));
            C2SMessageTable.Add(0x01F8, (reader) => new ClientAddToTradeC2S(reader));
            C2SMessageTable.Add(0x01FA, (reader) => new ClientAcceptTradeC2S(reader));
            C2SMessageTable.Add(0x01FB, (reader) => new ClientDeclineTradeC2S(reader));
            S2CMessageTable.Add(0x01FD, (reader) => new ServerRegisterTradeS2C(reader));
            S2CMessageTable.Add(0x01FE, (reader) => new ServerOpenTradeS2C(reader));
            S2CMessageTable.Add(0x01FF, (reader) => new ServerCloseTradeS2C(reader));
            S2CMessageTable.Add(0x0200, (reader) => new ServerAddToTradeS2C(reader));
            S2CMessageTable.Add(0x0201, (reader) => new ServerRemoveFromTradeS2C(reader));
            S2CMessageTable.Add(0x0202, (reader) => new ServerAcceptTradeS2C(reader));
            S2CMessageTable.Add(0x0203, (reader) => new ServerDeclineTradeS2C(reader));
            C2SMessageTable.Add(0x0204, (reader) => new ClientResetTradeC2S(reader));
            S2CMessageTable.Add(0x0205, (reader) => new ServerResetTradeS2C(reader));
            S2CMessageTable.Add(0x0207, (reader) => new ServerTradeFailureS2C(reader));
            S2CMessageTable.Add(0x0208, (reader) => new ServerClearTradeAcceptanceS2C(reader));
            C2SMessageTable.Add(0x0216, (reader) => new ClearPlayerConsentListC2S(reader));
            C2SMessageTable.Add(0x0217, (reader) => new DisplayPlayerConsentListC2S(reader));
            C2SMessageTable.Add(0x0218, (reader) => new RemoveFromPlayerConsentListC2S(reader));
            C2SMessageTable.Add(0x0219, (reader) => new AddPlayerPermissionC2S(reader));
            C2SMessageTable.Add(0x021C, (reader) => new BuyHouseC2S(reader));
            S2CMessageTable.Add(0x021D, (reader) => new HouseProfileS2C(reader));
            C2SMessageTable.Add(0x021E, (reader) => new QueryHouseC2S(reader));
            C2SMessageTable.Add(0x021F, (reader) => new AbandonHouseC2S(reader));
            C2SMessageTable.Add(0x0220, (reader) => new RemovePlayerPermissionC2S(reader));
            C2SMessageTable.Add(0x0221, (reader) => new RentHouseC2S(reader));
            C2SMessageTable.Add(0x0224, (reader) => new SetDesiredComponentLevelC2S(reader));
            S2CMessageTable.Add(0x0225, (reader) => new HouseDataS2C(reader));
            S2CMessageTable.Add(0x0226, (reader) => new HouseStatusS2C(reader));
            S2CMessageTable.Add(0x0227, (reader) => new UpdateRentTimeS2C(reader));
            S2CMessageTable.Add(0x0228, (reader) => new UpdateRentPaymentS2C(reader));
            C2SMessageTable.Add(0x0245, (reader) => new AddPermanentGuestC2S(reader));
            C2SMessageTable.Add(0x0246, (reader) => new RemovePermanentGuestC2S(reader));
            C2SMessageTable.Add(0x0247, (reader) => new SetOpenHouseStatusC2S(reader));
            S2CMessageTable.Add(0x0248, (reader) => new UpdateRestrictionsS2C(reader));
            C2SMessageTable.Add(0x0249, (reader) => new ChangeStoragePermissionC2S(reader));
            C2SMessageTable.Add(0x024A, (reader) => new BootSpecificHouseGuestC2S(reader));
            C2SMessageTable.Add(0x024C, (reader) => new RemoveAllStoragePermissionC2S(reader));
            C2SMessageTable.Add(0x024D, (reader) => new RequestFullGuestListC2S(reader));
            C2SMessageTable.Add(0x0254, (reader) => new SetMotdC2S(reader));
            C2SMessageTable.Add(0x0255, (reader) => new QueryMotdC2S(reader));
            C2SMessageTable.Add(0x0256, (reader) => new ClearMotdC2S(reader));
            S2CMessageTable.Add(0x0257, (reader) => new UpdateHARS2C(reader));
            C2SMessageTable.Add(0x0258, (reader) => new QueryLordC2S(reader));
            S2CMessageTable.Add(0x0259, (reader) => new HouseTransactionS2C(reader));
            C2SMessageTable.Add(0x025C, (reader) => new AddAllStoragePermissionC2S(reader));
            C2SMessageTable.Add(0x025E, (reader) => new RemoveAllPermanentGuestsC2S(reader));
            C2SMessageTable.Add(0x025F, (reader) => new BootEveryoneC2S(reader));
            C2SMessageTable.Add(0x0262, (reader) => new TeleToHouseC2S(reader));
            C2SMessageTable.Add(0x0263, (reader) => new QueryItemManaC2S(reader));
            S2CMessageTable.Add(0x0264, (reader) => new QueryItemManaResponseS2C(reader));
            C2SMessageTable.Add(0x0266, (reader) => new SetHooksVisibilityC2S(reader));
            C2SMessageTable.Add(0x0267, (reader) => new ModifyAllegianceGuestPermissionC2S(reader));
            C2SMessageTable.Add(0x0268, (reader) => new ModifyAllegianceStoragePermissionC2S(reader));
            C2SMessageTable.Add(0x0269, (reader) => new JoinC2S(reader));
            C2SMessageTable.Add(0x026A, (reader) => new QuitC2S(reader));
            C2SMessageTable.Add(0x026B, (reader) => new MoveC2S(reader));
            C2SMessageTable.Add(0x026D, (reader) => new MovePassC2S(reader));
            C2SMessageTable.Add(0x026E, (reader) => new StalemateC2S(reader));
            C2SMessageTable.Add(0x0270, (reader) => new ListAvailableHousesC2S(reader));
            S2CMessageTable.Add(0x0271, (reader) => new AvailableHousesS2C(reader));
            S2CMessageTable.Add(0x0274, (reader) => new ConfirmationRequestS2C(reader));
            C2SMessageTable.Add(0x0275, (reader) => new ConfirmationResponseC2S(reader));
            S2CMessageTable.Add(0x0276, (reader) => new ConfirmationDoneS2C(reader));
            C2SMessageTable.Add(0x0277, (reader) => new BreakAllegianceBootC2S(reader));
            C2SMessageTable.Add(0x0278, (reader) => new TeleToMansionC2S(reader));
            C2SMessageTable.Add(0x0279, (reader) => new SuicideC2S(reader));
            S2CMessageTable.Add(0x027A, (reader) => new AllegianceLoginNotificationEventS2C(reader));
            C2SMessageTable.Add(0x027B, (reader) => new AllegianceInfoRequestC2S(reader));
            S2CMessageTable.Add(0x027C, (reader) => new AllegianceInfoResponseEventS2C(reader));
            C2SMessageTable.Add(0x027D, (reader) => new CreateTinkeringToolC2S(reader));
            S2CMessageTable.Add(0x0281, (reader) => new JoinGameResponseS2C(reader));
            S2CMessageTable.Add(0x0282, (reader) => new StartGameS2C(reader));
            S2CMessageTable.Add(0x0283, (reader) => new MoveResponseS2C(reader));
            S2CMessageTable.Add(0x0284, (reader) => new OpponentTurnS2C(reader));
            S2CMessageTable.Add(0x0285, (reader) => new OpponentStalemateStateS2C(reader));
            C2SMessageTable.Add(0x0286, (reader) => new SpellbookFilterEventC2S(reader));
            S2CMessageTable.Add(0x028A, (reader) => new WeenieErrorS2C(reader));
            S2CMessageTable.Add(0x028B, (reader) => new WeenieErrorWithStringS2C(reader));
            S2CMessageTable.Add(0x028C, (reader) => new GameOverS2C(reader));
            C2SMessageTable.Add(0x028D, (reader) => new TeleToMarketplaceC2S(reader));
            C2SMessageTable.Add(0x028F, (reader) => new EnterPKLiteC2S(reader));
            C2SMessageTable.Add(0x0290, (reader) => new AssignNewLeaderC2S(reader));
            C2SMessageTable.Add(0x0291, (reader) => new ChangeFellowOpenessC2S(reader));
            S2CMessageTable.Add(0x0295, (reader) => new ChatRoomTrackerS2C(reader));
            C2SMessageTable.Add(0x02A0, (reader) => new AllegianceChatBootC2S(reader));
            C2SMessageTable.Add(0x02A1, (reader) => new AddAllegianceBanC2S(reader));
            C2SMessageTable.Add(0x02A2, (reader) => new RemoveAllegianceBanC2S(reader));
            C2SMessageTable.Add(0x02A3, (reader) => new ListAllegianceBansC2S(reader));
            C2SMessageTable.Add(0x02A5, (reader) => new RemoveAllegianceOfficerC2S(reader));
            C2SMessageTable.Add(0x02A6, (reader) => new ListAllegianceOfficersC2S(reader));
            C2SMessageTable.Add(0x02A7, (reader) => new ClearAllegianceOfficersC2S(reader));
            C2SMessageTable.Add(0x02AB, (reader) => new RecallAllegianceHometownC2S(reader));
            S2CMessageTable.Add(0x02AE, (reader) => new QueryPluginListS2C(reader));
            C2SMessageTable.Add(0x02AF, (reader) => new QueryPluginListResponseC2S(reader));
            S2CMessageTable.Add(0x02B1, (reader) => new QueryPluginS2C(reader));
            C2SMessageTable.Add(0x02B2, (reader) => new ClientQueryPluginResponseC2S(reader));
            S2CMessageTable.Add(0x02B3, (reader) => new ServerQueryPluginResponseS2C(reader));
            S2CMessageTable.Add(0x02B4, (reader) => new SalvageOperationsResultDataS2C(reader));
            S2CMessageTable.Add(0x02B8, (reader) => new PrivateRemoveInt64EventS2C(reader));
            S2CMessageTable.Add(0x02B9, (reader) => new RemoveInt64EventS2C(reader));
            S2CMessageTable.Add(0x02BB, (reader) => new HearSpeechS2C(reader));
            S2CMessageTable.Add(0x02BC, (reader) => new HearRangedSpeechS2C(reader));
            S2CMessageTable.Add(0x02BD, (reader) => new HearDirectSpeechS2C(reader));
            S2CMessageTable.Add(0x02BE, (reader) => new FullUpdateS2C(reader));
            S2CMessageTable.Add(0x02BF, (reader) => new DisbandS2C(reader));
            S2CMessageTable.Add(0x02C0, (reader) => new UpdateFellowS2C(reader));
            S2CMessageTable.Add(0x02C1, (reader) => new UpdateSpellS2C(reader));
            S2CMessageTable.Add(0x02C2, (reader) => new UpdateEnchantmentS2C(reader));
            S2CMessageTable.Add(0x02C3, (reader) => new RemoveEnchantmentS2C(reader));
            S2CMessageTable.Add(0x02C4, (reader) => new UpdateMultipleEnchantmentsS2C(reader));
            S2CMessageTable.Add(0x02C5, (reader) => new RemoveMultipleEnchantmentsS2C(reader));
            S2CMessageTable.Add(0x02C6, (reader) => new PurgeEnchantmentsS2C(reader));
            S2CMessageTable.Add(0x02C7, (reader) => new DispelEnchantmentS2C(reader));
            S2CMessageTable.Add(0x02C8, (reader) => new DispelMultipleEnchantmentsS2C(reader));
            S2CMessageTable.Add(0x02C9, (reader) => new PortalStormBrewingS2C(reader));
            S2CMessageTable.Add(0x02CA, (reader) => new PortalStormImminentS2C(reader));
            S2CMessageTable.Add(0x02CB, (reader) => new PortalStormS2C(reader));
            S2CMessageTable.Add(0x02CC, (reader) => new PortalStormSubsidedS2C(reader));
            S2CMessageTable.Add(0x02CD, (reader) => new PrivateUpdateIntS2C(reader));
            S2CMessageTable.Add(0x02CE, (reader) => new UpdateIntS2C(reader));
            S2CMessageTable.Add(0x02CF, (reader) => new PrivateUpdateInt64S2C(reader));
            S2CMessageTable.Add(0x02D0, (reader) => new UpdateInt64S2C(reader));
            S2CMessageTable.Add(0x02D1, (reader) => new PrivateUpdateBoolS2C(reader));
            S2CMessageTable.Add(0x02D2, (reader) => new UpdateBoolS2C(reader));
            S2CMessageTable.Add(0x02D3, (reader) => new PrivateUpdateFloatS2C(reader));
            S2CMessageTable.Add(0x02D4, (reader) => new UpdateFloatS2C(reader));
            S2CMessageTable.Add(0x02D5, (reader) => new PrivateUpdateStringS2C(reader));
            S2CMessageTable.Add(0x02D6, (reader) => new UpdateStringS2C(reader));
            S2CMessageTable.Add(0x02D7, (reader) => new PrivateUpdateDataIDS2C(reader));
            S2CMessageTable.Add(0x02D8, (reader) => new UpdateDataIDS2C(reader));
            S2CMessageTable.Add(0x02D9, (reader) => new PrivateUpdateInstanceIDS2C(reader));
            S2CMessageTable.Add(0x02DA, (reader) => new UpdateInstanceIDS2C(reader));
            S2CMessageTable.Add(0x02DB, (reader) => new PrivateUpdatePositionS2C(reader));
            S2CMessageTable.Add(0x02DC, (reader) => new UpdatePositionS2C(reader));
            S2CMessageTable.Add(0x02DD, (reader) => new PrivateUpdateSkillS2C(reader));
            S2CMessageTable.Add(0x02DE, (reader) => new UpdateSkillS2C(reader));
            S2CMessageTable.Add(0x02DF, (reader) => new PrivateUpdateSkillLevelS2C(reader));
            S2CMessageTable.Add(0x02E0, (reader) => new UpdateSkillLevelS2C(reader));
            S2CMessageTable.Add(0x02E1, (reader) => new PrivateUpdateSkillACS2C(reader));
            S2CMessageTable.Add(0x02E2, (reader) => new UpdateSkillACS2C(reader));
            S2CMessageTable.Add(0x02E3, (reader) => new PrivateUpdateAttributeS2C(reader));
            S2CMessageTable.Add(0x02E4, (reader) => new UpdateAttributeS2C(reader));
            S2CMessageTable.Add(0x02E5, (reader) => new PrivateUpdateAttributeLevelS2C(reader));
            S2CMessageTable.Add(0x02E6, (reader) => new UpdateAttributeLevelS2C(reader));
            S2CMessageTable.Add(0x02E7, (reader) => new PrivateUpdateAttribute2ndS2C(reader));
            S2CMessageTable.Add(0x02E8, (reader) => new UpdateAttribute2ndS2C(reader));
            S2CMessageTable.Add(0x02E9, (reader) => new PrivateUpdateAttribute2ndLevelS2C(reader));
            S2CMessageTable.Add(0x02EA, (reader) => new UpdateAttribute2ndLevelS2C(reader));
            S2CMessageTable.Add(0x02EB, (reader) => new TransientStringS2C(reader));
            C2SMessageTable.Add(0x0311, (reader) => new FinishBarberC2S(reader));
            S2CMessageTable.Add(0x0312, (reader) => new PurgeBadEnchantmentsS2C(reader));
            S2CMessageTable.Add(0x0314, (reader) => new SendClientContractTrackerTableS2C(reader));
            S2CMessageTable.Add(0x0315, (reader) => new SendClientContractTrackerS2C(reader));
            C2SMessageTable.Add(0x0316, (reader) => new AbandonContractC2S(reader));
            S2CMessageTable.Add(0xEA60, (reader) => new EnvironsS2C(reader));
            S2CMessageTable.Add(0xF619, (reader) => new PositionAndMovementEventS2C(reader));
            C2SMessageTable.Add(0xF61B, (reader) => new JumpC2S(reader));
            C2SMessageTable.Add(0xF61C, (reader) => new MoveToStateC2S(reader));
            C2SMessageTable.Add(0xF61E, (reader) => new DoMovementCommandC2S(reader));
            S2CMessageTable.Add(0xF625, (reader) => new ObjDescEventS2C(reader));
            S2CMessageTable.Add(0xF630, (reader) => new SetPlayerVisualDescS2C(reader));
            S2CMessageTable.Add(0xF643, (reader) => new CharGenVerificationResponseS2C(reader));
            C2SMessageTable.Add(0xF649, (reader) => new TurnToEventC2S(reader));
            S2CMessageTable.Add(0xF651, (reader) => new AwaitingSubscriptionExpirationS2C(reader));
            C2SMessageTable.Add(0xF653, (reader) => new LogOffCharacterC2S(reader));
            S2CMessageTable.Add(0xF653, (reader) => new LogOffCharacterS2C(reader));
            C2SMessageTable.Add(0xF655, (reader) => new CharacterDeleteC2S(reader));
            S2CMessageTable.Add(0xF655, (reader) => new CharacterDeleteS2C(reader));
            C2SMessageTable.Add(0xF656, (reader) => new SendCharGenResultC2S(reader));
            C2SMessageTable.Add(0xF657, (reader) => new SendEnterWorldC2S(reader));
            S2CMessageTable.Add(0xF658, (reader) => new LoginCharacterSetS2C(reader));
            S2CMessageTable.Add(0xF659, (reader) => new CharacterErrorS2C(reader));
            C2SMessageTable.Add(0xF661, (reader) => new StopMovementCommandC2S(reader));
            C2SMessageTable.Add(0xF6EA, (reader) => new SendForceObjdescC2S(reader));
            S2CMessageTable.Add(0xF745, (reader) => new CreateObjectS2C(reader));
            S2CMessageTable.Add(0xF746, (reader) => new CreatePlayerS2C(reader));
            S2CMessageTable.Add(0xF747, (reader) => new DeleteObjectS2C(reader));
            S2CMessageTable.Add(0xF748, (reader) => new PositionEventS2C(reader));
            S2CMessageTable.Add(0xF749, (reader) => new ParentEventS2C(reader));
            S2CMessageTable.Add(0xF74A, (reader) => new PickupEventS2C(reader));
            S2CMessageTable.Add(0xF74B, (reader) => new SetStateS2C(reader));
            S2CMessageTable.Add(0xF74C, (reader) => new SetObjectMovementS2C(reader));
            S2CMessageTable.Add(0xF74E, (reader) => new VectorUpdateS2C(reader));
            S2CMessageTable.Add(0xF750, (reader) => new SoundEventS2C(reader));
            S2CMessageTable.Add(0xF751, (reader) => new PlayerTeleportS2C(reader));
            C2SMessageTable.Add(0xF752, (reader) => new AutonomyLevelC2S(reader));
            C2SMessageTable.Add(0xF753, (reader) => new AutonomousPositionC2S(reader));
            S2CMessageTable.Add(0xF754, (reader) => new PlayScriptIDS2C(reader));
            S2CMessageTable.Add(0xF755, (reader) => new PlayScriptTypeS2C(reader));
            S2CMessageTable.Add(0xF7C1, (reader) => new AccountBannedS2C(reader));
            C2SMessageTable.Add(0xF7C8, (reader) => new SendEnterWorldRequestC2S(reader));
            C2SMessageTable.Add(0xF7C9, (reader) => new JumpNonAutonomousC2S(reader));
            S2CMessageTable.Add(0xF7CA, (reader) => new ReceiveAccountDataS2C(reader));
            S2CMessageTable.Add(0xF7CB, (reader) => new ReceivePlayerDataS2C(reader));
            C2SMessageTable.Add(0xF7CC, (reader) => new SendAdminGetServerVersionC2S(reader));
            C2SMessageTable.Add(0xF7CD, (reader) => new SendFriendsCommandC2S(reader));
            C2SMessageTable.Add(0xF7D9, (reader) => new SendAdminRestoreCharacterC2S(reader));
            S2CMessageTable.Add(0xF7DB, (reader) => new UpdateObjectS2C(reader));
            S2CMessageTable.Add(0xF7DC, (reader) => new AccountBootedS2C(reader));
            S2CMessageTable.Add(0xF7DE, (reader) => new TurbineChatS2C(reader));
            C2SMessageTable.Add(0xF7DE, (reader) => new TurbineChatC2S(reader));
            S2CMessageTable.Add(0xF7DF, (reader) => new EnterGameServerReadyS2C(reader));
            S2CMessageTable.Add(0xF7E0, (reader) => new TextboxStringS2C(reader));
            S2CMessageTable.Add(0xF7E1, (reader) => new WorldInfoS2C(reader));
            S2CMessageTable.Add(0xF7E2, (reader) => new DataMessageS2C(reader));
            C2SMessageTable.Add(0xF7E3, (reader) => new RequestDataMessageC2S(reader));
            S2CMessageTable.Add(0xF7E4, (reader) => new ErrorMessageS2C(reader));
            S2CMessageTable.Add(0xF7E5, (reader) => new InterrogationMessageS2C(reader));
            C2SMessageTable.Add(0xF7E6, (reader) => new InterrogationResponseMessageC2S(reader));
            S2CMessageTable.Add(0xF7E7, (reader) => new BeginDDDMessageS2C(reader));
            S2CMessageTable.Add(0xF7EA, (reader) => new OnEndDDDS2C(reader));
            C2SMessageTable.Add(0xF7EA, (reader) => new OnEndDDDC2S(reader));
            C2SMessageTable.Add(0xF7EB, (reader) => new EndDDDMessageC2S(reader));

        }

        internal static Message ReadS2CMessage(uint type, BinaryReader reader)
        {
            if (!S2CMessageTable.ContainsKey(type))
                throw new ArgumentException("Message type " + type + " is not one we have implimented!");
            return S2CMessageTable[type](reader);
        }

        internal static Message ReadC2SMessage(uint type, BinaryReader reader)
        {
            if (!C2SMessageTable.ContainsKey(type))
                throw new ArgumentException("Message type " + type + " is not one we have implimented!");
            return C2SMessageTable[type](reader);
        }
    }
}
